generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "wizeq")] // Add the pgvector extension
}

model admins {
  email String @id @db.VarChar(255)
  name  String @db.VarChar(255)
}

model answers {
  answer_id               Int       @id @default(autoincrement())
  answer_text             String    @db.VarChar(3000)
  answered_by_picture     String?   @db.VarChar(255)
  answer_date             DateTime  @db.Timestamptz(6)
  answered_by_employee_id Int
  answered_question_id    Int
  createdat               DateTime  @default(now()) @db.Timestamptz(6)
  updatedat               DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  num_scores              Int?      @default(0)
  average_score           Float?    @default(0)
  nps                     nps[]
  question                questions @relation(fields: [answered_question_id], references: [question_id], map: "answered_question_id")

  answeredby users @relation(fields: [answered_by_employee_id], references: [employee_id], map: "answered_by_employee_id")

  @@index([answered_by_employee_id], map: "answers_answered_by_employee_id_fkey")
  @@index([answered_question_id], map: "answers_answered_question_id_fkey")
}

model commentvote {
  id         Int      @id @default(autoincrement())
  comment_id Int
  user       String   @db.VarChar(255)
  value      Int      @db.SmallInt
  comments   comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, map: "commentvote_ibfk_1")

  @@index([comment_id], map: "comment_id")
}

model comments {
  id          Int           @id @default(autoincrement())
  comment     String?       @db.VarChar(3000)
  createdat   DateTime      @default(now()) @db.Timestamptz(6)
  questionid  Int
  sessionhash String?       @db.VarChar(255)
  username    String?       @db.VarChar(255)
  useremail   String?       @db.VarChar(255)
  updatedat   DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  approvedby  Int?
  tag_id      Int?
  taggedby    String?
  approver    users?        @relation("comments_approvedbytousers", fields: [approvedby], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "approver")
  user        users?        @relation("comments_useremailtousers", fields: [useremail], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "user")
  questions   questions     @relation(fields: [questionid], references: [question_id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_1")
  commentvote commentvote[]

  @@index([questionid], map: "questionid")
  @@index([approvedby], map: "comments_approved_by_employeeid")
  @@index([useremail], map: "comments_created_by_employeeid")
}

model departments {
  department_id                        Int       @id @default(autoincrement())
  name                                 String    @db.VarChar(255)
  is_active                            Boolean   @default(true)
  manager_employee_id                  Int?
  alternate_manager_id                 Int?
  last_manager_email_notification_date DateTime? @db.Timestamptz(6)

  managerdepartmet users?      @relation("manager", fields: [manager_employee_id], references: [employee_id])
  alternatemanager users?      @relation("submanager", fields: [alternate_manager_id], references: [employee_id])
  questions        questions[]

  @@index([manager_employee_id], map: "departments_manager_employee_id")
  @@index([alternate_manager_id], map: "departments_alternate_manager_employee_id")
}

model draftanswers {
  answer      String    @db.VarChar(3000)
  employee_id Int       @default(0)
  question_id Int       @default(0)
  users       users     @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, map: "draftanswers_ibfk_1")
  questions   questions @relation(fields: [question_id], references: [question_id], onDelete: NoAction, map: "draftanswers_ibfk_2")

  @@id([employee_id, question_id])
  @@index([question_id], map: "question_id")
}

model employees {
  name      String  @db.VarChar(255)
  email     String  @id @db.VarChar(255)
  is_admin  Boolean
  job_title String  @db.VarChar(255)
}

model employeesdepartments {
  id            Int    @id @default(autoincrement())
  email         String @db.VarChar(255)
  department_id Int
  employee_id   Int?
  users         users? @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_id")

  @@index([employee_id], map: "employee_id_foreign_idx")
}

model locations {
  name      String      @unique @db.VarChar(255)
  code      String      @id @db.VarChar(255)
  questions questions[]
}

model nps {
  answer_id    Int     @default(0)
  user         String? @db.VarChar(255)
  score        Int
  session_hash String  @db.VarChar(255)
  id           Int     @id @default(autoincrement())
  answers      answers @relation(fields: [answer_id], references: [answer_id], onDelete: NoAction, onUpdate: NoAction, map: "nps_ibfk_1")

  @@unique([answer_id, user], map: "unique_mail_with_answer")
}

model questions {
  question_id                  Int            @id @default(autoincrement())
  question                     String         @db.VarChar
  user_hash                    String         @default("") @db.VarChar(255)
  is_anonymous                 Boolean
  createdat                    DateTime       @default(now()) @db.Timestamptz(6)
  updatedat                    DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  location                     String?        @default("ALL") @db.VarChar(255)
  last_email_notification_date DateTime?      @db.Timestamptz(6)
  assigned_department          Int?
  created_by_employee_id       Int?
  assigned_to_employee_id      Int?
  numcomments                  Int?           @default(0)
  num_votes                    Int?           @default(0)
  is_pinned                    Boolean        @default(false)
  is_enabled                   Boolean        @default(true)
  is_public                    Boolean        @default(true)
  locations                    locations?     @relation(fields: [location], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "questions_ibfk_1")
  assigned_to                  users?         @relation("assignedquestion", fields: [assigned_to_employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "assigned_to")
  created_by                   users?         @relation("createdquestion", fields: [created_by_employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "created_by")
  comments                     comments[]
  draftanswers                 draftanswers[]
  sentiments                   sentiments[]
  votes                        votes[]
  answers                      answers[]
  department                   departments?   @relation(fields: [assigned_department], references: [department_id], map: "department")
  embeddings                   embeddings[]
  last_embedded_date           DateTime?      @db.Timestamptz(6)

  @@index([assigned_to_employee_id], map: "assigned_to_employee_id_foreign_idx")
  @@index([created_by_employee_id], map: "created_by_employee_id_foreign_idx")
  @@index([location], map: "location")
  @@index([assigned_department], map: "questions_assigned_department_fkey")
}

model embeddings {
  id          Int                         @id @default(autoincrement())
  embedding   Unsupported("vector(768)")?
  question_id Int                         @unique
  question    questions                   @relation(fields: [question_id], references: [question_id], onDelete: Cascade)
}

model sentiments {
  sentiment_id          Int       @id @default(autoincrement())
  sentiment_question_id Int
  label                 String    @db.VarChar(255)
  score                 Decimal   @db.Decimal(10, 9)
  questions             questions @relation(fields: [sentiment_question_id], references: [question_id], onDelete: Cascade, onUpdate: NoAction, map: "sentiments_ibfk_1")

  @@index([sentiment_question_id], map: "sentiment_question_id")
}

model votes {
  id          Int        @id @default(autoincrement())
  question_id Int?
  user        String     @db.VarChar(255)
  is_upvote   Boolean?
  questions   questions? @relation(fields: [question_id], references: [question_id], onDelete: Cascade, map: "votes_ibfk_1")

  @@unique([question_id, user], map: "unique_mail_with_question")
}

model users {
  employee_id          Int                    @id @default(autoincrement())
  full_name            String                 @db.VarChar(255)
  email                String                 @unique(map: "email") @db.VarChar(255)
  is_admin             Boolean                @default(false)
  profile_picture      String?                @db.VarChar(255)
  job_title            String?                @db.VarChar(255)
  draftanswers         draftanswers[]
  employeesdepartments employeesdepartments[]
  assigned             questions[]            @relation("assignedquestion")
  created              questions[]            @relation("createdquestion")
  answers              answers[]
  commentsapproved     comments[]             @relation("comments_approvedbytousers")
  commentscreated      comments[]             @relation("comments_useremailtousers")
  managerdepartments   departments[]          @relation("manager")
  alternatemanager     departments[]          @relation("submanager")

  @@index([email], map: "users_email")
}

model sequelizemeta {
  name String @id @unique @db.VarChar(255)
}

model commenttags {
  tag_id   Int    @id @default(autoincrement())
  tag_text String @db.VarChar(255)
}
